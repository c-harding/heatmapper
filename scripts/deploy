#!/usr/bin/env bash

# Exit on first error
set -e

cd "$(dirname "$0")/.."

. scripts/connect

if [ ! -z "$ENV" ]; then
  ENV_CMD="$(printf 'rm -r .env && mv -T %q.env .env' $ENV)"
  EXCLUDE_FLAG="--exclude=.env"
else
  ENV_CMD="true"
  EXCLUDE_FLAG=""
fi

# On the server, start the docker process, clear old docker images and then set up port forwarding
# (assuming the server is set up as in this gist:
# https://gist.github.com/c-harding/59686990f42f4dddae01dffa56618ea4, if not then this stage is
# simply skipped).
(
  RAW_DOMAIN="${SERVER_DOMAIN/#*\/\//}"
  DEPLOY_COMMAND="$(printf '
    (cd %q && %s && rm ?*.env) &&
    docker-compose -f%q/docker-compose.yml up --build -d &&
    docker system prune -f &&
    (command -v add-site > /dev/null && add-site %q %d; true)
  ' "${DEPLOY_DIR:-.}" "$ENV_CMD" "${DEPLOY_DIR:-.}" "$RAW_DOMAIN" "$SERVER_PORT")"

  rsync -re"ssh $DEPLOY_FLAG" $EXCLUDE_FLAG dist/ "$DEPLOY_TARGET":"${DEPLOY_DIR:-.}"
  ssh $DEPLOY_FLAG "$DEPLOY_TARGET" "$DEPLOY_COMMAND"
)
